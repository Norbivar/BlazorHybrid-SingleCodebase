@namespace MyBlazor.Pages

@using MyBlazor.Authentication
@using MyBlazor.Notifications
@using MyBlazor.Widgets.Notification

@inherits LayoutComponentBase

@inject INotificationService NotificationService
@inject IAuthenticationService AuthenticationService

@if (activePopup is not null)
{
	<NotificationPopupWidget notificationPopupModel=@activePopup />
}

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<NotificationSwimLane />

	<!-- <NotificationLog /> -->

	<main>
		<!--
		<div class="top-row px-4">
			<a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
		</div>
		-->

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

@code {
    private NotificationPopup? activePopup;

	protected override async Task OnInitializedAsync()
    {
		await AuthenticationService.ReloginAsync();

		NotificationService.OnNotificationPopupReceived += AddNotificationPopup;
	}

	public void Dispose()
	{
		NotificationService.OnNotificationPopupReceived -= AddNotificationPopup;
	}

	private async void ClearPopup()
	{
		activePopup = null;
		await InvokeAsync(StateHasChanged);
	}

	private async void AddNotificationPopup(NotificationPopup popup)
	{
		popup.OnClickedOK += ClearPopup;
		popup.OnClickedCancel += ClearPopup;

		activePopup = popup;
		await InvokeAsync(StateHasChanged);
	}
}
