@page "/account/login"

@using Microsoft.AspNetCore.Components.Authorization
@using MyBlazor.Authentication
@using MyBlazor.HTTP
@using MyBlazor.Notifications
@using MyBlazor.Models
@using System.Text.Json
@using System.Text
@using Blazored.LocalStorage
@using System.Net.Http.Headers

@inject NavigationManager NavigationManager;
@inject INotificationService NotificationService
@inject IAuthenticationService AuthenticationService
@inject HttpHubService HttpHub

<div>
	<div id="base">
		<table>
			<tr>
				<td>
					<h3>Login</h3>
				</td>
			</tr>
			<tr>
				<td>
					<label for="email">E-mail:</label>
				</td>
				<td>
					<input type="text" name="email" @bind=email />
				</td>
			</tr>
			<tr>
				<td>
					<label for="pass">Password:</label>
				</td>
				<td>
					<input type="password" name="pass" @bind=password />
				</td>
			</tr>
			<tr>
				<td colspan="2">
					<input id="login-button" type="submit" value="Login" @onclick="HandleSubmit" />
				</td>
			</tr>
		</table>
	</div>
</div>

@code {
	private string email = "";
	private string password = "";

	private async Task HandleSubmit()
	{
		var isEmailValid = email.Length >= 3 || !email.Contains('@');
		var isPasswordValid = password.Length >= 3;

		if (!isEmailValid || !isPasswordValid)
		{
			NotificationService.SendNotificationSwimmer("Error", "E-mail or password is malformed or not at least 3 characters!", NotificationType.Error);
			return;
		}

		var loginResult = await HttpHub.Post.Login(new LoginRegisterModel
			{
				Email = email,
				Password = password
			});

		if (loginResult.Success && loginResult.Value is not null && loginResult.Value.JWTToken is not null)
		{
			var result = await AuthenticationService.LoginAsync(loginResult.Value.JWTToken);
			if (result)
			{
				NotificationService.SendNotificationSwimmer("Success", "Login successful!");
				NavigationManager.NavigateTo("/");
			}
			else
			{
			NotificationService.SendNotificationSwimmer("Error", "Invalid username/password!", NotificationType.Error);
			}
		}
		else
		{
			NotificationService.SendNotificationSwimmer("Error", "Invalid username/password!", NotificationType.Error);
		}
	}
}
