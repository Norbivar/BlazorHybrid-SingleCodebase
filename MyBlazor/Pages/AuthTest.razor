@page "/authtest"

@using MyBlazor.Authentication
@using MyBlazor.Notifications
@using System.Text.Json
@using System.Text
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject HttpClient HttpClient
@inject INotificationService NotificationService

<PageTitle>Auth Test</PageTitle>

<p><button @onclick="SecureMethod">Server auth test</button></p>

<AuthorizeView>
	<Authorized>
		<p>Hello, @context.User.Claims.Where(claim => claim.Type == ClaimTypes.Email).Select(claim => claim.Value).FirstOrDefault()!</p>
		<!-- <p><button @onclick="SecureMethod">Authorized Only Button</button></p> -->
	</Authorized>
	<NotAuthorized>
		<p>You're not authorized.</p>
	</NotAuthorized>
</AuthorizeView>

<p><button @onclick="SendSwimmerNotif">Send Swimmer Notif</button></p>

@code {
		[CascadingParameter]
		private Task<AuthenticationState>? authenticationState { get; set; }

		private void SendSwimmerNotif()
		{
			string desc = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut" +
			"labore et dolore magna aliqua. Ut enim ad minim veniam, quis " +
			"nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat";

		NotificationService.SendNotificationSwimmer(new NotificationSwimmer
		{
			Title = "Test Notif",
			Description = desc,
		});
	}

	private async void SecureMethod()
	{
		Console.WriteLine($"SecureMethod!");
		if (authenticationState is not null)
		{
			Console.WriteLine($"SecureMethod authstate!");
			var authState = await authenticationState;
			var user = authState?.User;

			if (user?.Identity is not null && user.Identity.IsAuthenticated)
			{
				Console.WriteLine($"'{user.Identity.Name}' is authenticated.");
			}
		}
		Console.WriteLine($"SecureMethod done!");
	}
}
