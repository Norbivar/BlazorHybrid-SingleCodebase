@page "/account/register"

@using MyBlazor.Shared.Notifications
@using MyBlazor.SharedUI.Pages.Models
@using System.Text.Json
@using System.Text

@inject HttpClient HttpClient
@inject NavigationManager navigationManager;
@inject INotificationService NotificationService

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="HandleSubmit">
	<AntiforgeryToken />

	<fieldset class="grid-container">
		<label for="email">E-mail:</label>
		<input type="text" name="email" @bind=registerModel.Email />

		<label for="pass">Password:</label>
		<input type="password" name="pass" @bind=registerModel.Password />

		<label for="pass">Password again:</label>
		<input type="password" name="pass2" @bind=passwordAgain />

		<input type="submit" value="Register!">
	</fieldset>
</EditForm>

@code {
	private string passwordAgain = "";
	private RegisterModel registerModel = new RegisterModel();

	private string Encrypt(string text)
	{
		byte[] data = System.Text.Encoding.ASCII.GetBytes(text);
		data = System.Security.Cryptography.SHA256.Create().ComputeHash(data);
		return System.Text.Encoding.ASCII.GetString(data);
	}

	private async Task HandleSubmit()
	{
		var isEmailValid = registerModel.Email.Length > 3 || !registerModel.Email.Contains('@');
		var isPasswordValid = registerModel.Password.Length > 3;

		if (!isEmailValid || !isPasswordValid)
		{
			NotificationService.SendNotificationSwimmer("Error", "E-mail or password is malformed or not at least 3 characters!", NotificationType.Error);
			return;
		}

		RegisterModel toBeSentModel = registerModel.ShallowCopy();
		toBeSentModel.Password = Encrypt(toBeSentModel.Password);

		var passwordAgainEncrypted = Encrypt(passwordAgain);

		if (passwordAgainEncrypted.Equals(toBeSentModel.Password))
		{
			var content = new StringContent(JsonSerializer.Serialize(toBeSentModel), Encoding.UTF8, "application/json");
			var response = await HttpClient.PostAsync($"{navigationManager.BaseUri}account/register", content)
				.ConfigureAwait(false);

			if (response.IsSuccessStatusCode)
			{
				NotificationService.SendNotificationSwimmer("Success", "Account registered!");
			}
			else
			{
				NotificationService.SendNotificationSwimmer("Error", "Error encountered while registering!", NotificationType.Error);
			}
		}
		else
		{
			NotificationService.SendNotificationSwimmer("Error", "Entered passwords are different!", NotificationType.Error);
		}
	}
}
