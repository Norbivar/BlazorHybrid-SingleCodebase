@using MyBlazor.Shared.Notifications
@inherits LayoutComponentBase

@inject INotificationService NotificationService

@if (activePopup is not null)
{
	<NotificationPopupWidget notificationPopupModel=@activePopup />
}

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<div id="swim-lane">
		@foreach (var notif in notifications)
		{
			<NotificationSwimmerWidget NotificationSwimmerModel=@notif />
		}
	</div>

	<main>
		<div class="top-row px-4">
			<a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
		</div>

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

@code {
	private List<NotificationSwimmer> notifications = new List<NotificationSwimmer>();
	private NotificationPopup? activePopup;

	protected override void OnInitialized()
	{
		NotificationService.OnNotificationPopupReceived += AddNotificationPopup;
		NotificationService.OnNotificationSwimmerReceived += AddNotificationSwimmer;

		// TEST:
		AddNotificationPopup(new NotificationPopup
			{
				Title = "HellO!",
				Description = "I am testing the popup! lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit amet",
				Type = NotificationType.Info,
				Buttons = new List<NotificationPopup.PopupButtonID> { NotificationPopup.PopupButtonID.Ok, NotificationPopup.PopupButtonID.Cancel}
			});
		AddNotificationSwimmer(new NotificationSwimmer
			{
				Title = "HellO!",
				Description = "I am testing the Swimmer! lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit amet",
				Type = NotificationType.Info,
				ShowFor = TimeSpan.FromSeconds(600)
			});

	}

	public void Dispose()
	{
		NotificationService.OnNotificationPopupReceived -= AddNotificationPopup;
		NotificationService.OnNotificationSwimmerReceived -= AddNotificationSwimmer;
	}

	private async void ClearPopup()
	{
		activePopup = null;
		await InvokeAsync(StateHasChanged);
	}

	private async void AddNotificationPopup(NotificationPopup popup)
	{
		popup.OnClickedOK += ClearPopup;
		popup.OnClickedCancel += ClearPopup;

		activePopup = popup;
		await InvokeAsync(StateHasChanged);
	}

	private async void AddNotificationSwimmer(NotificationSwimmer notification)
	{
		notification.ShouldDisappearHandler = new Timer(async state =>
		{
			while (notification.HoveredOver && !notification.ManuallyClosed)
			{
				await Task.Delay(500);
			}

			notification.Display = false;
			await InvokeAsync(StateHasChanged);
			await Task.Delay(700);

			notifications.Remove(notification);
			await InvokeAsync(StateHasChanged);
		}, notification, notification.ShowFor, Timeout.InfiniteTimeSpan);

		notifications.Add(notification);
		await InvokeAsync(StateHasChanged);
	}
}
