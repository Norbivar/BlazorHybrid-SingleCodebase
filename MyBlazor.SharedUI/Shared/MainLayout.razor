@inherits LayoutComponentBase

@using MyBlazor.Shared.Notifications
@using MyBlazor.SharedUI.Pages.Models

@inject INotificationService NotificationService

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<div id="swim-lane">
		@foreach (var notif in notifications)
		{
			<NotificationSwimmer NotificationSwimmerModel=@notif />
		}
	</div>

	<main>
		<div class="top-row px-4">
			<a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
		</div>

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

@code {
	private List<NotificationSwimmerModel> notifications = new List<NotificationSwimmerModel>();

	private async void AddNotificationSwimmer(MyBlazor.Shared.Notifications.NotificationSwimmer notification)
	{
		var notif = new NotificationSwimmerModel
			{
				Title = notification.Title,
				Description = notification.Description,
				Icon = NotificationSwimmerModel.NotificationTypeToIcon(notification.Type)
			};

		var deleteAfter = TimeSpan.FromSeconds(10);

		notif.ShouldDisappearHandler = new Timer(async state =>
		{
			while (notif.HoveredOver && !notif.ManuallyClosed)
			{
				await Task.Delay(500);
			}

			notif.Display = false;
			await InvokeAsync(StateHasChanged);
			await Task.Delay(700);

			notifications.Remove(notif);
			await InvokeAsync(StateHasChanged);
		}, notif, deleteAfter, Timeout.InfiniteTimeSpan);

		notifications.Add(notif);
		await InvokeAsync(StateHasChanged);
	}

	protected override void OnInitialized()
	{
		NotificationService.OnNotificationSwimmerReceived += AddNotificationSwimmer;
	}

	public void Dispose()
	{
		// Unsubscribe when the component is disposed
		NotificationService.OnNotificationSwimmerReceived -= AddNotificationSwimmer;
	}
}
